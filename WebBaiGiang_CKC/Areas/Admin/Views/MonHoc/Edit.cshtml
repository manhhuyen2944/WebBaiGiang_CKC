@model WebBaiGiang_CKC.Models.MonHoc

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<ol class="breadcrumb">

    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Trang chủ</a></li>
    <li class="breadcrumb-item"><a asp-controller="MonHoc" asp-action="Index">Quản lý môn học</a></li>
    <li class="breadcrumb-item"><a asp-controller="MonHoc" asp-action="Edit">Sửa</a></li>

</ol>

<h1 style="text-align: center;">SỬA MÔN HỌC</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="MonHocId" />
            <div class="form-group">
                <label asp-for="TenMonHoc" class="control-label"></label>
                <input asp-for="TenMonHoc" class="form-control" />
                <span asp-validation-for="TenMonHoc" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <label asp-for="MaMonHoc" class="control-label"></label>
                <input asp-for="MaMonHoc" class="form-control" />
                <span asp-validation-for="MaMonHoc" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <label asp-for="MoTa" class="control-label" for="htmlelementid"></label>
                <textarea id="htmlelementid" name="MoTa" class="form-control" asp-for="MoTa"></textarea>
                <span asp-validation-for="MoTa" class="text-danger"></span>
            </div>
            <br />

            <div class="form-group">
                <input type="submit" value="Sửa" class="btn btn-primary" />
                <a class="btn btn-secondary" asp-action="Index">Quay Lại</a>
            </div>
        </form>
    </div>
</div>

@section scripts{
    <script>
        (function (factory) {
            if (typeof define === 'function' && define.amd) {
                define(['jquery'], factory);
            }
            else if (typeof module === 'object' && module.exports) {
                module.exports = factory(require('jquery'));
            } else {
                factory(window.jQuery);
            }
        }(function ($) {
            $.extend($.summernote.plugins, {
                // Tạo plugin tên elfinder
                'elfinder': function (context) {
                    var self = this;
                    // ui has renders to build ui elements.
                    var ui = $.summernote.ui;
                    // Tạo nút bấm
                    context.memo('button.elfinder', function () {
                        var button = ui.button({
                            contents: '<i class="note-icon-picture"/> elFinder',
                            tooltip: 'Quản lý file',
                            click: function () {
                                // Bấm vào nút bấm gọi hàm elfinderDialog
                                elfinderDialog(context);
                            }
                        });
                        // create jQuery object from button instance.
                        var $elfinder = button.render();
                        return $elfinder;
                    });
                    // This methods will be called when editor is destroyed by $('..').summernote('destroy');
                    // You should remove elements on `initialize`.
                    this.destroy = function () {
                        this.$panel.remove();
                        this.$panel = null;
                    };
                }

            });
        }));
        function elfinderDialog(editor) {
            var fm = $('<div/>').dialogelfinder({
                baseUrl: "@Url.Content("~/lib/elfinder/")",
                url: "@Url.Action("Connector","HinhAnh", new {Area ="Admin"})",
                lang: 'vi',
                width: 840,
                height: 450,
                destroyOnClose: true,
                getFileCallback: function (files, fm) {
                    console.log(files);
                    editor.invoke('editor.insertImage', files.url);
                },
                commandsOptions: {
                    getfile: {
                        oncomplete: 'close',
                        folders: false
                    }
                }
            }).dialogelfinder('instance');
        }
        $(document).ready(function () {
            $('#htmlelementid').summernote({

                height: 700,
                width: 2000,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'underline', 'clear']],
                    ['fontsize', ['fontsize']],
                    ['fontname', ['fontname']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video', 'elfinder']],
                    ['view', ['fullscreen', 'codeview', 'help']],
                ],

            });
        });
    </script>
}
